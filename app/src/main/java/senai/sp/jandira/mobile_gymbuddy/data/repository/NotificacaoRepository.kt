package senai.sp.jandira.mobile_gymbuddy.data.repository

import android.util.Log
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flow
import retrofit2.Response
import senai.sp.jandira.mobile_gymbuddy.data.model.Notificacao
import senai.sp.jandira.mobile_gymbuddy.data.model.NotificacaoResponse
import senai.sp.jandira.mobile_gymbuddy.data.model.ContagemNotificacoes
import senai.sp.jandira.mobile_gymbuddy.data.service.NotificacaoService
import senai.sp.jandira.mobile_gymbuddy.data.service.RetrofitFactory

/**
 * Repository para gerenciar opera√ß√µes relacionadas √†s notifica√ß√µes
 */
class NotificacaoRepository {
    
    private val notificacaoService: NotificacaoService = RetrofitFactory.getNotificacaoService()
    
    /**
     * Busca todas as notifica√ß√µes de um usu√°rio espec√≠fico
     */
    suspend fun getNotificacoesUsuario(idUsuario: Int): Flow<List<Notificacao>> = flow {
        try {
            val response = notificacaoService.getNotificacoesUsuario(idUsuario)
            if (response.isSuccessful && response.body()?.status == true) {
                emit(response.body()?.notificacoes ?: emptyList())
            } else {
                Log.e("NotificacaoRepository", "Erro ao buscar notifica√ß√µes: ${response.errorBody()?.string()}")
                emit(emptyList())
            }
        } catch (e: Exception) {
            Log.e("NotificacaoRepository", "Exce√ß√£o ao buscar notifica√ß√µes", e)
            emit(emptyList())
        }
    }
    
    /**
     * Busca todas as notifica√ß√µes usando a view detalhada
     * Endpoint: http://localhost:8080/v1/gymbuddy/view/notificacoes
     */
    suspend fun getTodasNotificacoes(): Flow<List<Notificacao>> = flow {
        try {
            Log.d("NotificacaoRepository", "üîç Fazendo requisi√ß√£o para notifica√ß√µes...")
            val response = notificacaoService.getTodasNotificacoes()
            Log.d("NotificacaoRepository", "üì° Resposta recebida: ${response.isSuccessful}, c√≥digo: ${response.code()}")
            
            if (response.isSuccessful && response.body()?.status == true) {
                val notificacoes = response.body()?.notificacoes ?: emptyList()
                Log.d("NotificacaoRepository", "‚úÖ Notifica√ß√µes encontradas: ${notificacoes.size}")
                emit(notificacoes)
            } else {
                Log.e("NotificacaoRepository", "‚ùå Erro ao buscar todas notifica√ß√µes: ${response.errorBody()?.string()}")
                Log.e("NotificacaoRepository", "Status da resposta: ${response.body()?.status}")
                emit(emptyList())
            }
        } catch (e: Exception) {
            Log.e("NotificacaoRepository", "üí• Exce√ß√£o ao buscar todas notifica√ß√µes", e)
            emit(emptyList())
        }
    }
    
    /**
     * Busca apenas notifica√ß√µes n√£o lidas de um usu√°rio
     */
    suspend fun getNotificacoesNaoLidas(idUsuario: Int): Flow<List<Notificacao>> = flow {
        try {
            val response = notificacaoService.getNotificacoesNaoLidas(idUsuario)
            if (response.isSuccessful && response.body()?.status == true) {
                emit(response.body()?.notificacoes ?: emptyList())
            } else {
                Log.e("NotificacaoRepository", "Erro ao buscar notifica√ß√µes n√£o lidas: ${response.errorBody()?.string()}")
                emit(emptyList())
            }
        } catch (e: Exception) {
            Log.e("NotificacaoRepository", "Exce√ß√£o ao buscar notifica√ß√µes n√£o lidas", e)
            emit(emptyList())
        }
    }
    
    /**
     * Marca uma notifica√ß√£o como lida
     */
    suspend fun marcarComoLida(idNotificacao: Int): Boolean {
        return try {
            val response = notificacaoService.marcarComoLida(idNotificacao)
            response.isSuccessful
        } catch (e: Exception) {
            Log.e("NotificacaoRepository", "Erro ao marcar notifica√ß√£o como lida", e)
            false
        }
    }
    
    /**
     * Marca todas as notifica√ß√µes de um usu√°rio como lidas
     */
    suspend fun marcarTodasComoLidas(idUsuario: Int): Boolean {
        return try {
            val response = notificacaoService.marcarTodasComoLidas(idUsuario)
            response.isSuccessful
        } catch (e: Exception) {
            Log.e("NotificacaoRepository", "Erro ao marcar todas notifica√ß√µes como lidas", e)
            false
        }
    }
    
    /**
     * Conta o n√∫mero de notifica√ß√µes n√£o lidas
     */
    suspend fun contarNotificacoesNaoLidas(idUsuario: Int): Int {
        return try {
            val response = notificacaoService.contarNotificacoesNaoLidas(idUsuario)
            if (response.isSuccessful) {
                // agora o endpoint retorna um objeto ContagemNotificacoes com campo `nao_lidas`
                response.body()?.naoLidas ?: 0
            } else {
                0
            }
        } catch (e: Exception) {
            Log.e("NotificacaoRepository", "Erro ao contar notifica√ß√µes n√£o lidas", e)
            0
        }
    }
}
